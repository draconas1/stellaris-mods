# condan_values.txt  Contingency Processing Core 1A6F
# Stellaris 2024 ModJam
# Contributors: Draconas

example_value = {
    base = 10 # default: 0
    # List of valid mathematical operations:
    # 	Numerical (modifying by a number):
    # 	- set/weight (both do the same, replaces the current result with this value)
    # 	- add
    # 	- subtract
    # 	- factor/mult/multiply ("multiply" fits the name scheme of the rest better, but the other two were kept for historical reasons)
    # 	- divide
    # 	- modulo
    # 	- round_to (rounds to nearest of that value, e.g. 10.7 round_to 5 gives you 10)
    # 	- max (sets to specified value if currently above it)
    # 	- min (sets to specified value if currently below it)
    # 	- pow (value is multiplied by itself to the power of x; be careful, you can get overflows if you are not careful)
    # 	Simple (do not need a number, but just "yes", e.g. "round = yes")
    # 	- round (sets to nearest full number)
    # 	- ceiling (rounds up)
    # 	- floor (rounds down)
    # 	- abs (multiply by -1 if negative)
    # 	- square (multiply by itself)
    # 	- square_root
    # All mathematical operations except weight and factor can be used inline e.g.
    add = 100
    round = yes
    # (Note: weight and factor will instead overwrite the base value - use set, mult or multiply instead)
    # They can also be used in modifier = {} fields, which lets you only apply them if triggers are true
    #modifier = {
    #    max = owner.max_example_variable 					# Variable set by set_variable
    #    owner = { is_variable_set = max_example_variable }	# Only applied if this trigger is true
    #}
    ## What works for right hand side values of mathematical operations? See events/00_how_to_use_variables for full list.
    #complex_trigger_modifier = { 	# This lets you get the value of a trigger that you can't use in one-liners because it uses {}
    #    trigger = count_owned_planet
    #    trigger_scope = owner 		# Lets you get the result of the trigger on a different scope. Default is "this"
    #    parameters = { 				# Stick any further information necessary in here, like you'd do within the {} of the trigger normally
    #        limit = { num_pops > 10 }
    #    }
    #    mode = add 					# Allows all numerical operations
    #    mult = 5 					# Multiplies the outcome by this. In this example, this means adding 5 for each planet with more than 10 pops
    #}
}

condan_leader_embezzle_mult = {
    base = 0
    add = this.condan_embezzle_mult
}