namespace = la_leader


# Fired by on_added_to_leader_pool
# A leader is added to the leader pool, available for recruitment
# scope: country, from: leader
# Add traits from civics and origins
country_event = {
	id = la_leader.100
	hide_window = yes

	is_triggered_only = yes


	trigger = {
		NOT = { has_country_flag = spawning_renowned_leader }
	}

	immediate = {

		# # Champions of the Empire
		# # Adds a random common trait
		# if = {
		# 	limit = {
		# 		has_tradition = tr_aptitude_champions_of_the_empire
		# 	}
		# 	from = {
		# 		add_trait = {
		# 			trait = random_common
		# 			show_message = no
		# 		}
		# 	}
		# }
        #
		# # Optimized Neurology
		# # Adds a random common trait
		# if = {
		# 	limit = {
		# 		has_country_flag = genetic_ascension_stage_1_purity
		# 		has_genetic_stage_1_tradition = yes
		# 	}
		# 	from = {
		# 		add_trait = {
		# 			trait = random_common
		# 			show_message = no
		# 		}
		# 	}
		# }

		# Aristocratic Elite
		# 20% Chance for a random positive trait and a random negative trait
		if = {
			limit = {
				has_valid_civic = civic_aristocratic_elite
			}
			from = {
				random_list = {
					80 = {  }
					20 = {
						# add_trait = {
						# 	trait = random_common
						# 	show_message = no
						# }
						# add_trait = {
						# 	trait = random_negative
						# 	show_message = no
						# }
						# Variable "leader_pending_negative_traits_unmodified" doesn't exist yet, can't reduce it yet. Check made in paragon_2.2200.
						change_background_job = noble
					}
				}
			}
		}

		# # Technocracy
		# # Adds a random expertise trait
		# if = {
		# 	limit = {
		# 		has_valid_civic = civic_technocracy
		# 		from = { leader_class = scientist }
		# 	}
		# 	from = {
		# 		add_random_expertise_trait_effect = yes
		# 	}
		# }

		# Crusader Spirit
		# Adds the Crusader trait
		if = {
			limit = {
				has_valid_civic = civic_crusader_spirit
				from = { leader_class = commander }
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_crusader
				}
			}
		}

		# Letters of Marque
		# Adds the Corsair trait
		if = {
			limit = {
				has_civic = civic_crusader_spirit_corporate
				from = { leader_class = commander }
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_corsair
				}
			}
		}

		# Tactical Algorithms
		# Adds the Tactical Algorithms trait
		if = {
			limit = {
				has_civic = civic_machine_tactical_algorithms
				from = { leader_class = commander }
			}
			from = {
				add_trait = {
					trait = leader_trait_tactical_algorithms
					show_message = no
				}
			}
		}

		# Storm Chasers
		# Adds the Storm Rider trait
		if = {
			limit = {
				has_origin = origin_storm_chasers
			}
			from = {
				switch = {
					trigger = leader_class
					commander = {
						add_trait = {
							trait = leader_trait_storm_rider_commander
							show_message = no
						}
					}
					scientist = {
						add_trait = {
							trait = leader_trait_storm_rider_scientist
							show_message = no
						}
					}
					official = {
						add_trait = {
							trait = leader_trait_storm_rider_official
							show_message = no
						}
					}
				}
			}
		}

		# Treasure Hunters
		# Adds the Adventurous Spirit trait
		if = {
			limit = {
				has_origin = origin_treasure_hunters
			}
			from = {
				give_trait_no_notify_ignore_autocracy_restriction = {
					TRAIT = leader_trait_adventurous_spirit_3
				}
			}
		}

		# Biochemical Composure/Cloning Authorities
		if = {
			limit = {
				from = {
					leader_can_have_backup_clone = yes
				}
			}
			from = {
				random_list = {
					75 = {
						# Base 75% chance of nothing
						modifier = {
							factor = 0
							root = {
								is_cloning_authority = yes
								has_cloning_biochemical_composure_tradition = yes
							}
						}
					}
					25 = {
						add_trait = {
							trait = leader_trait_has_backup_clone
							show_message = no
						}
					}
				}
			}
		}

		# Genetic Purity Authorities
		if = {
			limit = {
				is_purity_authority = yes
				is_imperial_authority = no
				is_hive_empire = no
				is_megacorp = no
				from = {
					species = {
						is_robotic_species = no
					}
				}
			}
			from = {
				add_trait = {
					trait = trait_leader_genetic_purist
				}
			}
		}

		# Biotic Dominion
		if = {
			limit = {
				is_purity_authority = yes
				is_imperial_authority = yes
				from = {
					is_same_species = root.ruler
				}
			}
			from = {
				add_trait = {
					trait = trait_imperial_heir
					show_message = no
				}
			}
		}

		# Unplugged
		# Adds Cybernetic Benefits Trait
		if = {
			limit = {
				has_origin = origin_unplugged
				from = {
					leader_class = commander
					species = {
						is_same_value = prevprev.owner_main_species
					}
				}
			}

			owner_main_species = {
				switch = {
					trigger = has_trait
					trait_unplugged_cybernetic_positives_3 = {
						prev.from = {
							add_trait = {
								trait = leader_trait_unplugged_cybernetic_positives_3
								show_message = no
							}
						}
					}
					trait_unplugged_cybernetic_positives_2 = {
						prev.from = {
							add_trait = {
								trait = leader_trait_unplugged_cybernetic_positives_2
								show_message = no
							}
						}
					}
					trait_unplugged_cybernetic_positives_1 = {
						prev.from = {
							add_trait = {
								trait = leader_trait_unplugged_cybernetic_positives_1
								show_message = no
							}
						}
					}
				}
			}
		}

		# Entropy Drinkers
		# Adds the Psionic trait
		if = {
			limit = { is_entropy_drinkers_empire = yes }
			from = {
				add_trait = {
					trait = leader_trait_psionic
					show_message = no
				}
			}
		}

		if = {
			limit = {
				has_shroud_dlc = yes
				is_oligarchic_authority = yes
				is_corporeal_authority = yes
			}
			from = {
				add_trait = {
					trait = random_negative
					show_message = no
				}
			}
		}

		if = {
			limit = {
				has_shroud_dlc = yes
				is_superstitious_beliefs_empire = yes
			}
			if = {
				limit = {
					has_cycle_of_fortune = yes
				}
				from = {
					add_trait = {
						trait = random_common
						show_message = no
					}
				}
			}
			if = {
				limit = {
					has_cycle_of_omens = yes
				}
				from = {
					add_trait = {
						trait = random_negative
						show_message = no
					}
				}
			}
		}
	}
}